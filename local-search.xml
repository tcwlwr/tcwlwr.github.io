<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第三周作业</title>
    <link href="/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><span id="more"></span><p><strong>第三周作业</strong></p><ol><li><p>图文并茂说明raid0,raid1, raid10, raid01, raid5等原理。</p><p>（1）raid0</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/raid0.jpg" alt="image-屏幕截图"></p><p>​        raid0以chunk为单位交叉读写数据，所以raid0的读写速度很快，但是没有冗余功能，一块硬盘坏了，所有数据都访问不了。可用空间：N*min(S1,S2,…)，最少磁盘数：1+</p><p>（2）raid1</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/raid1.jpg" alt="image-屏幕截图"></p><p>​       raid1为了提高容错能力，每个磁盘都互为镜像。有冗余能力，但是读能力上升，写能力略微下降，可用空间：1*min(S1,S2,…)，磁盘利用率 50%，最少磁盘数：2+ 。</p><p>（3）raid5</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/raid5.jpg" alt="image-屏幕截图"></p><p>​    raid5没有采用专用的校验磁盘，对于数据和校验数据，它们的写操作可以同时发生在完全不同的磁盘上，当阵列磁盘 数量增加时，并行操作量的能力也随之增长。RAID5 的磁盘上同时存储数据和校验数据，数据块和对应的校验信息存保存在不同的磁盘上，当一个数据盘损坏时，系统可以根据同一条带的其他数据块和对应的校验数据来重建损坏的数据。读写性能提升，可用空间：(N-1)*min(S1,S2,…)，有容错能力：允许最多1块磁盘损坏，最少磁盘数：3, 3+。</p><p>（4）raid01</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/raid01.jpg" alt="image-屏幕截图"></p><p>​    多块磁盘先实现RAID0,再组合成RAID1，读写能力提升，可用空间：N*min(S1,S2,…)/2，有容错能力：每组镜像最多只能坏一块，最少磁盘数：4, 4+。</p><p>（5）raid10</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/raid10.jpg" alt="image-屏幕截图"></p><p>​    多块磁盘先实现RAID1,再组合成RAID0，读写能力提升，可用空间：N*min(S1,S2,…)/2，有容错能力：每组镜像最多只能坏一块，最少磁盘数：4, 4+。</p></li><li><p>创建一个至少有两个PV组成的大小为20G的名为testvg的VG，要求PE大小为16M，而后在卷组中创建大小为5G的逻辑卷testlv;挂载至/users目录</p></li></ol><p>  （1）查看磁盘信息</p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/lsblk.JPG" alt="image-屏幕截图"></p><p>  （2）在sdb和sdc上创建10G的分区</p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/fdisk.JPG" alt="image-屏幕截图"></p><p>  （3）在sdb分区和sdc上分别创建物理卷</p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/pvcreat.JPG" alt="image-屏幕截图"></p><p>  （4）创建物理卷组testvg，PE为16</p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/vgcreat.JPG" alt="image-屏幕截图"></p><p>  （5）在testvg中创建大小为5G的逻辑卷</p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/lvcreate.JPG" alt="image-屏幕截图"></p><p>  （6）挂载至/users目录。</p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/mount.JPG" alt="image-屏幕截图"></p><ol start="3"><li>新建用户archlinux,要求其家目录为/users/archlinux，而后su切换至archlinux用户，复制/etc/pam.d/目录至自己的家目录。</li></ol><p>  useradd archlinux -d /users/archlinux<br>  su - archlinux<br>  cp -a /etc/pam.d .</p><ol start="4"><li>扩展testlv至7G，要求archlinux用户的文件不能丢失</li></ol><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/lvresize.JPG" alt="image-屏幕截图"></p><ol start="5"><li>收缩testlv至3G，要求archlinux用户的文件不能丢失</li></ol><p>  (1) 第一步</p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/e2fsck.JPG" alt="image-屏幕截图"></p><p>  (2) 第二步</p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/resize.JPG" alt="image-屏幕截图"></p><p>  (3) 第三步</p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/lvreduce.JPG" alt="image-屏幕截图"></p><ol start="6"><li>对testlv创建快照，并尝试基于快照备份数据，验正快照的功能</li></ol><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/kuaizhao.JPG" alt="image-屏幕截图"></p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/huifu.JPG" alt="image-屏幕截图"></p><ol start="7"><li>创建10G的RAID1，要求CHUNK为128K，文件系统为ext4，有一个空闲盘，开机可自动挂载至/backup目录</li></ol><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/craid1.JPG" alt="image-屏幕截图"></p><ol start="8"><li>创建一个可用空间为10G的RAID10设备，要求CHUNK为256K，文件系统为ext4，开机可自动挂载至/mydata目录</li></ol><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/craid10.JPG" alt="image-屏幕截图"></p><ol start="9"><li>静态配置网卡IP，centos/ubuntu实现</li></ol><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/eth0.JPG" alt="image-屏幕截图"></p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/yaml.JPG" alt="image-屏幕截图"></p><ol start="10"><li>图文并茂解释TCP/IP 3次握手4次断开。</li></ol><p>  (1) 三次握手</p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/3.JPG" alt="image-屏幕截图"></p><p>  第一次握手:<br>  客户端发送一个TCP的SYN标志位置1的包指明客户打算连接的服务器的端口，以及初始序号X,保存在包头的序列号(Sequence Number)字段里。</p><p>  第二次握手:<br>  服务器发回确认包(ACK)应答。即SYN标志位和ACK标志位均为1同时，将确认序号(Acknowledgement Number) 设置为客户的I S N加1以.即X+1。</p><p>  第三次握手.<br>  客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放在确定字段中发送给对方.并且在数据段放写ISN的+1</p><p>  (2) 四次挥手</p><p>  <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/4.JPG" alt="image-屏幕截图"></p><p>  ​</p><p>  第一次挥手：客户端发出释放FIN=1，自己序列号seq=u，进入FIN-WAIT-1状态。</p><p>  第二次挥手：服务器收到客户端的后，发出ACK=1确认标志和客户端的确认号ack=u+1，自己的序列号seq=v，进入CLOSE-WAIT状态。</p><p>  第三次挥手：客户端收到服务器确认结果后，进入FIN-WAIT-2状态。此时服务器发送释放FIN=1信号，确认标志ACK=1，确认序号ack=u+1，自己序号seq=w，服务器进入LAST-ACK（最后确认态）。</p><p>  第四次挥手：客户端收到回复后，发送确认ACK=1，ack=w+1，自己的seq=u+1，客户端进入TIME-WAIT（时间等待）。客户端经过2个最长报文段寿命后，客户端CLOSE；服务器收到确认后，立刻进入CLOSE状态。</p><ol start="11"><li>网卡绑定bond0的实现</li></ol><p>   <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/bond0.JPG" alt="image-屏幕截图"></p><p>   <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/bond01.JPG" alt="image-屏幕截图"></p><p>   <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/bond02.JPG" alt="image-屏幕截图"></p><p>   <img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/bond00.JPG" alt="image-屏幕截图"></p><ol start="12"><li>实现免密登陆脚本, expect登陆远程主机，将生成的密钥写入到目标主机, expect测试远程登陆。<br>1）通过shift读取脚本参数<br>2）通过select来选择功能.例如功能有</li></ol><ul><li>安装mysql</li><li>安装apache</li><li>免密钥登陆主机<br>当前我们只实现免密钥登陆主机<br>3）通过函数封装每个功能<br>4）将免密钥登陆的过程可以重复进行, while 循环实现重复，需要有退出过程。当用户输入exit时，退出免密钥功能。<br>5）支持输入一批主机免密钥，使用数组实现</li></ul><p>   ​</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第二周作业</title>
    <link href="/2022/06/19/%E7%AC%AC%E4%BA%8C%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/06/19/%E7%AC%AC%E4%BA%8C%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><span id="more"></span><p>#!/bin/bash</p><p>PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/user/local/sbin</p><p>ip=<code>ifconfig | sed -nr &#39;2s/[^0-9]+([0-9.]+).*/\1/p&#39;</code> </p><p> //将ifconfig获取的地址赋给变量ip<br>echo “$ip”       //打印变量ip</p><p>if [[ $ip =~ .*<em>3.</em> *]] ; then<br>        echo <code>date</code><br>else<br>        groupadd magedu<br>        for i in {1..100} ; do<br>                useradd magedu_$i -g magedu<br>        done</p><p>fi    //如果变量ip里有3则输出系统时间，否则创建magedu组和创建magedu_1…….magedu_100</p><p>grep -v ‘/sbin/nologin’ /etc/passwd|cut -d: -f1  </p><p>//输出/etc/passwd文件下shell非/sbin/nologin的用户名</p><p>yum install -y nginx<br>systemctl start nginx</p><p>//yum 安装Nginx，并启动服务</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一周作业</title>
    <link href="/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ol><li><p><strong>图文并茂解释开源协定的区别？</strong></p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.jpg" alt="image-屏幕截图"></p><p>​    LGPL：LGPL是GPL的变种，与GPL不同的是可以私有使用LGPL授权的自由软件，开发出来的新软件可以是私有的而不需要是自由软件。所以任何公司在使用自由软件之前应该保证在LGPL或其它GPL变种的授权下。</p><p>​    Mozilla：代码再修改后，需要使用相同或类似的协议，需要对修改部分通过说明文档。</p><p>​    GPL：可以商业使用，可以分发，可以修改，自动获得专利权，也可以私下修改使用，分发时，需要保留相同的协议，必须开源，并记录修改。</p><p>​    BSD：可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。可以开源也可以闭源，对修改过得文件不必放置版权说明，不可以用开源代码的作者/机构名字和原来产品的名字。</p><p>​    MIT：不会自动获得专利，有专利的须获得授权。使用时仅需保留原协议声明，没有专利时，是最宽松的协议了。</p><p>​    Apache：该协议和BSD类似，允许代码修改，再发布（作为开源或商业软件）。需要给修改的文件进行说明，必须放置版权说明。</p></li><li><p><strong>安装centos ubuntu系统.</strong></p><p>使用VMware安装centos和ubuntu</p><p>(1).安装centos</p><p>​    1.下载centos镜像（我选择的是centos 8镜像）</p><p>​            镜像地址：阿里云：<a href="https://mirrors.aliyun.com/centos-vault/">https://mirrors.aliyun.com/centos-vault/</a></p><p>​                   腾讯云：<a href="https://mirrors.cloud.tencent.com/centos-vault/">https://mirrors.cloud.tencent.com/centos-vault/</a></p><p>​                   清华云：<a href="https://mirrors.tuna.tsinghua.edu.cn/centos-vault/">https://mirrors.tuna.tsinghua.edu.cn/centos-vault/</a></p><p>​    2.打开VMware，创建虚拟机。</p></li></ol><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/1.jpg" alt="Image-1"></p><p>   ​    3.选择自定义安装</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/2.jpg" alt="Image-2"></p><p>​        4.默认选择Workstations 16.x  。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/3.jpg" alt="Image-3"></p><p>​        5.选择第三项，稍后添加操作系统映像。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/4.jpg" alt="Image-4"></p><p>​        6.操作系统选择Linux，版本选择所需要的操作系统版本（这里我选的是centos 8）。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/5.jpg" alt="5"></p><p>​        7.修改虚拟机名称，选择虚拟机安装位置</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/6.jpg" alt="6"></p><p>​        8.选择虚拟机处理器，内核参数（建议最小2个内核）。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/7.jpg" alt="7"></p><p>​        9.选择虚拟机内存（建议2G内存，否则操作系统有可能安装不上）。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/8.jpg" alt="8"></p><p>​        10.选择网络连接类型。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/9.jpg" alt="9"></p><p>​        11.接下来默认选择就可以。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/10.jpg" alt="10"></p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/11.jpg" alt="11"></p><p>​        12.选择创建新虚拟磁盘。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/12.jpg" alt="12"></p><p>​        13.根据所需要求选择磁盘大小。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/13.jpg" alt="13"></p><p>​        14.磁盘文件名字默认选项即可。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/14.jpg" alt="14"></p><p>​        15.打开虚拟机设置</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/15.jpg" alt="15"></p><p>​        16.就选择CD/DVD，使用ISO映像文件，添加映像存放位置。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/16.jpg" alt="15"></p><p>​    17.开启虚拟机。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/17.jpg" alt="17"></p><p>​    18.第一次使用该映像建议选择第二项先自检后安装，之后就可以选第一项直接安装。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/18.jpg" alt="18"></p><p>​    </p><p>​        19.选择语言，默认是英语。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/19.jpg" alt="19"></p><p>​        20.1是修改时间，时区。2.选择安装内容（建议最小安装）。3.进行磁盘分区。4.启用网络。5.设置root密码。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/20.jpg" alt="20"></p><p>​        21.选择第二个，进行自定义分区。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/21.jpg" alt="19"></p><p>​            22.根据需求进行磁盘分区</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/22.jpg" alt="22"></p><p>​        23.重启，安装成功</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/23.jpg" alt="23"></p><p>（2）安装ubuntu</p><p>​    1.下载ubuntu镜像（我选择的是ubuntu 1804镜像）</p><p>​            镜像地址：阿里云：<a href="https://mirrors.aliyun.com/ubuntu-releases/">https://mirrors.aliyun.com/ubuntu-releases/</a></p><p>​                   腾讯云：<a href="https://mirrors.cloud.tencent.com/ubuntu-releases/">https://mirrors.cloud.tencent.com/ubuntu-releases/</a></p><p>​                   清华云：<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/</a></p><p>​    2~17.参考centos安装</p><p>​    18.选择语言。<img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/50.jpg" alt="50"></p><p>​        19.选择继续。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/51.jpg" alt="51"></p><p>​        20.选择语言。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/52.jpg" alt="52"></p><p>​        21.修改网络设置。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/53.jpg" alt="53"></p><p>​        22.选择第二项进行自定义分区</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/54.jpg" alt="54"></p><p>​        23.根据要求进行磁盘分区。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/57.jpg" alt="56"></p><p>​        24.添加用户名密码。<img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/58.jpg" alt="58"></p><p>​    25.选择是否安装openssh</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/59.jpg" alt="59"></p><p>​    26.选择安装包，开始安装。</p><p><img src="https://raw.githubusercontent.com/tcwlwr/tcwlwr.github.io/main/2022/06/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/60.jpg" alt="59"></p><p> 3.<strong>通过计算机基础和帮助的学习，完成学习ifconfig命令的使用。</strong></p><p>​    ifconfig：用于显示或设置网络设备。</p><p>​            -a：显示所有当前可用的接口，即使关闭。</p><p>​            -s：显示简短的列表。</p><p>​            add：增加ipv6的地址。</p><p>​            del：删除ipv6的地址。</p><p>​            io_addr：设置I/O地址。</p><p>​            netmask：设置子网掩码。</p><p>​            address：分配给这个接口的 ip 地址。</p><p>​            tunnel：建立IPv4与IPv6之间的隧道通信地址。</p><p>​            down 关闭指定的网络设备。</p><p>​            up 启动指定的网络设备。</p><p>​            metric：指定在计算数据包的转送次数</p><p> 4.<strong>总结linux FHS结构</strong>。</p><p>​    /：整个文件系统的根目录。</p><p>​    /boot：引导文件存放目录。</p><p>​    /bin：存放用户使用的基本命令。</p><p>​    /sbin：存放管理类命令。</p><p>​    /lib：存放基本的共享库文件及内核模块文件。</p><p>​    /lib64：存放辅助共享库文件。</p><p>​    /etc：存放配置文件目录。</p><p>​    /home：普通用户的家目录。</p><p>​    /media：移动设备挂载点。</p><p>​    /mnt：临时文件挂载点。</p><p>​    /opt：第三方应用安装位置。</p><p>​    /root：管理员的家目录。</p><p>​    /dev：设备文件存放位置。</p><p>​    /proc：内核与进程信息相关的虚拟文件系统。</p><p>​    /sys：系统上硬件设备相关信息虚拟文件系统。</p><p>​    /usr：存放大部分用户功能和应用。</p><p>​    /var：存放一些经常更改的文件。</p><p>​    /tmp：存放一些临时文件。</p><p>​    </p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/15/hello-world/"/>
    <url>/2022/05/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a><br>1111</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>免费搞网站-gitpages</title>
    <link href="/2022/05/12/%E5%85%8D%E8%B4%B9%E6%90%9E%E7%BD%91%E7%AB%99-gitpages/"/>
    <url>/2022/05/12/%E5%85%8D%E8%B4%B9%E6%90%9E%E7%BD%91%E7%AB%99-gitpages/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>完全免费的git网站搭建, 参考 <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><p>实现的目标: 本地写markdown, 推送github即可以看 github.io 域名查看网页。</p><p>实现的工具</p><ul><li><code>nodejs</code>           hexo生成网站</li><li><code>codeup.aliyun.com</code>    保存自己的博客代码</li><li><code>github.com</code>   静态页面展示 </li><li><code>vscode</code>   开发工具</li></ul><span id="more"></span><h1 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h1><p>参考  <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a> 确保访问OK</p><p>slcnx.github.io 仓库名</p><p>准备index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  hello world<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="20220512214701-16524035403072.png" alt="image-20220512214700115"></p><p><img src="20220512214623.png" alt="image-20220512214617755"></p><h1 id="docker推送github"><a href="#docker推送github" class="headerlink" title="docker推送github"></a>docker推送github</h1><p>新建临时目录，vscode打开, 准备以下文件</p><p>id_rsa_2048 <strong>需要linux生成或xshell生成，不可以自己生成</strong></p><p>id_rsa_2048的公钥加入到以上仓库中</p><p><img src="20220512225649.png" alt="image-20220512225647448"></p><p>Dockerfile</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">FROM</span> node:latest<br><br><br>WORKDIR /data/git <br><br><span class="hljs-built_in">ADD</span> id_rsa_2048 /root/.ssh/<br><span class="hljs-built_in">RUN</span>  chmod 600 /root/.ssh/id_rsa_2048 <br><br><span class="hljs-built_in">ADD</span> . ./<br><br><span class="hljs-comment"># 生成网页</span><br><span class="hljs-comment">#RUN npm run build </span><br><br><br><span class="hljs-comment"># 上传到GIT</span><br><br><span class="hljs-built_in">RUN</span> install -dv /data/page/ &amp;&amp; cp -a index.html /data/page/<br><br><br>WORKDIR /data/page/<br>ENV <span class="hljs-attribute">GIT_SSH_COMMAND</span>=<span class="hljs-string">&#x27;ssh -i /root/.ssh/id_rsa_2048  -o IdentitiesOnly=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no&#x27;</span><br><span class="hljs-built_in">RUN</span> git<span class="hljs-built_in"> config </span>--global init.defaultBranch main &amp;&amp; git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&#x27;2192383945@qq.com&#x27;</span> &amp;&amp; git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&#x27;songliangcheng&#x27;</span>  &amp;&amp; \<br>    git<span class="hljs-built_in"> config </span>--global pull.rebase <span class="hljs-literal">true</span> &amp;&amp; \<br>    git init &amp;&amp; \<br>    git remote <span class="hljs-built_in">add</span> origin git@github.com:slcnx/slcnx.github.io.git &amp;&amp; git <span class="hljs-built_in">add</span> -A &amp;&amp; git commit -m init &amp;&amp; git push --force origin main <br></code></pre></td></tr></table></figure><p>index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    cat<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">D:\vscode_projects\myblog&gt;docker build -t <span class="hljs-built_in">test</span> .<br></code></pre></td></tr></table></figure><p><img src="20220512223352.png" alt="image-20220512223351323"></p><h1 id="本地生成hexo仓库"><a href="#本地生成hexo仓库" class="headerlink" title="本地生成hexo仓库"></a>本地生成hexo仓库</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br><br><span class="hljs-comment"># 当前目录为项目根</span><br>hexo init test1blog<br><span class="hljs-built_in">cd</span> test1blog<br><br><span class="hljs-comment"># 内容</span><br>$ <span class="hljs-built_in">ls</span><br>_config.landscape.yml  node_modules/  package-lock.json  <span class="hljs-built_in">source</span>/<br>_config.yml            package.json   scaffolds/         themes/<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p><img src="20220512224452.png" alt="image-20220512224451207"></p><h2 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h2><p>在以上目录 <code>test1blog</code> 中生成以下文件</p><ol><li><p><code>.dockerignore</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">node_modules/<br></code></pre></td></tr></table></figure></li><li><p><code>Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:latest<br><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /data/git </span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> id_rsa_2048 /root/.ssh/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash">  <span class="hljs-built_in">chmod</span> 600 /root/.ssh/id_rsa_2048 </span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . ./</span><br><br><span class="hljs-comment"># 生成网页</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install &amp;&amp; npm run build </span><br><br><span class="hljs-comment"># 上传到GIT</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> install -dv /data/page/ &amp;&amp; <span class="hljs-built_in">cp</span> -a public /data/page/</span><br><br><span class="hljs-keyword">ARG</span> GITHUB<br><span class="hljs-keyword">ARG</span> GUSER <br><span class="hljs-keyword">ARG</span> EMAIL <br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /data/page/public/</span><br><span class="hljs-keyword">ENV</span> GIT_SSH_COMMAND=<span class="hljs-string">&#x27;ssh -i /root/.ssh/id_rsa_2048  -o IdentitiesOnly=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no&#x27;</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> git config --global init.defaultBranch main &amp;&amp; git config --global user.email <span class="hljs-variable">$EMAIL</span>  &amp;&amp; git config --global user.name <span class="hljs-variable">$GUSER</span>  &amp;&amp; \</span><br><span class="language-bash">    git config --global pull.rebase <span class="hljs-literal">true</span> &amp;&amp; \</span><br><span class="language-bash">    git init &amp;&amp; \</span><br><span class="language-bash">    git remote add origin <span class="hljs-variable">$GITHUB</span> &amp;&amp; git add -A &amp;&amp; git commit -m init &amp;&amp; git push --force origin main </span><br></code></pre></td></tr></table></figure></li><li><p><code>id_rsa_2048</code> 以上与github互通的密钥</p></li><li><p>发布</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker build <span class="hljs-attr">--build-arg</span> GITHUB=git@github<span class="hljs-selector-class">.com</span>:slcnx/slcnx<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span> <span class="hljs-attr">--build-arg</span> EMAIL=<span class="hljs-string">&#x27;2192383945@qq.com&#x27;</span> <span class="hljs-attr">--build-arg</span> GUSER=<span class="hljs-string">&#x27;songliangcheng&#x27;</span> ./<br></code></pre></td></tr></table></figure></li></ol><p><img src="20220512225143.png" alt="image-20220512225141348"></p><h1 id="codeup一键发布"><a href="#codeup一键发布" class="headerlink" title="codeup一键发布"></a>codeup一键发布</h1><h2 id="添加codeup仓库"><a href="#添加codeup仓库" class="headerlink" title="添加codeup仓库"></a>添加codeup仓库</h2><p>将当前仓库加入到自己的codeup中</p><p><img src="20220512230442.png" alt="image-20220512230441057"></p><p>复制https地址 <a href="https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git">https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git</a></p><h2 id="初始化代码"><a href="#初始化代码" class="headerlink" title="初始化代码"></a>初始化代码</h2><p>将上面test1blog中，初始化，添加代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global init.defaultBranch main<br>git init<br>git remote add origin https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git<br></code></pre></td></tr></table></figure><p>添加文件 <code>.gitignore</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Logs</span><br>logs<br>*.<span class="hljs-built_in">log</span><br>npm-debug.log*<br>yarn-debug.log*<br>yarn-error.log*<br>lerna-debug.log*<br>.pnpm-debug.log*<br><br><span class="hljs-comment"># Diagnostic reports (https://nodejs.org/api/report.html)</span><br>report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json<br><br><span class="hljs-comment"># Runtime data</span><br>pids<br>*.pid<br>*.seed<br>*.pid.lock<br><br><span class="hljs-comment"># Directory for instrumented libs generated by jscoverage/JSCover</span><br>lib-cov<br><br><span class="hljs-comment"># Coverage directory used by tools like istanbul</span><br>coverage<br>*.lcov<br><br><span class="hljs-comment"># nyc test coverage</span><br>.nyc_output<br><br><span class="hljs-comment"># Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)</span><br>.grunt<br><br><span class="hljs-comment"># Bower dependency directory (https://bower.io/)</span><br>bower_components<br><br><span class="hljs-comment"># node-waf configuration</span><br>.lock-wscript<br><br><span class="hljs-comment"># Compiled binary addons (https://nodejs.org/api/addons.html)</span><br>build/Release<br><br><span class="hljs-comment"># Dependency directories</span><br>node_modules/<br>jspm_packages/<br><br><span class="hljs-comment"># Snowpack dependency directory (https://snowpack.dev/)</span><br>web_modules/<br><br><span class="hljs-comment"># TypeScript cache</span><br>*.tsbuildinfo<br><br><span class="hljs-comment"># Optional npm cache directory</span><br>.npm<br><br><span class="hljs-comment"># Optional eslint cache</span><br>.eslintcache<br><br><span class="hljs-comment"># Optional stylelint cache</span><br>.stylelintcache<br><br><span class="hljs-comment"># Microbundle cache</span><br>.rpt2_cache/<br>.rts2_cache_cjs/<br>.rts2_cache_es/<br>.rts2_cache_umd/<br><br><span class="hljs-comment"># Optional REPL history</span><br>.node_repl_history<br><br><span class="hljs-comment"># Output of &#x27;npm pack&#x27;</span><br>*.tgz<br><br><span class="hljs-comment"># Yarn Integrity file</span><br>.yarn-integrity<br><br><span class="hljs-comment"># dotenv environment variable files</span><br>.<span class="hljs-built_in">env</span><br>.env.development.local<br>.env.test.local<br>.env.production.local<br>.env.local<br><br><span class="hljs-comment"># parcel-bundler cache (https://parceljs.org/)</span><br>.cache<br>.parcel-cache<br><br><span class="hljs-comment"># Next.js build output</span><br>.next<br>out<br><br><span class="hljs-comment"># Nuxt.js build / generate output</span><br>.nuxt<br>dist<br><br><span class="hljs-comment"># Gatsby files</span><br>.cache/<br><span class="hljs-comment"># Comment in the public line in if your project uses Gatsby and not Next.js</span><br><span class="hljs-comment"># https://nextjs.org/blog/next-9-1#public-directory-support</span><br><span class="hljs-comment"># public</span><br><br><span class="hljs-comment"># vuepress build output</span><br>.vuepress/dist<br><br><span class="hljs-comment"># vuepress v2.x temp and cache directory</span><br>.temp<br>.cache<br><br><span class="hljs-comment"># Docusaurus cache and generated files</span><br>.docusaurus<br><br><span class="hljs-comment"># Serverless directories</span><br>.serverless/<br><br><span class="hljs-comment"># FuseBox cache</span><br>.fusebox/<br><br><span class="hljs-comment"># DynamoDB Local files</span><br>.dynamodb/<br><br><span class="hljs-comment"># TernJS port file</span><br>.tern-port<br><br><span class="hljs-comment"># Stores VSCode versions used for testing VSCode extensions</span><br>.vscode-test<br><br><span class="hljs-comment"># yarn v2</span><br>.yarn/cache<br>.yarn/unplugged<br>.yarn/build-state.yml<br>.yarn/install-state.gz<br>.pnp.*<br><br><br><span class="hljs-comment"># 静态文件</span><br>public <br></code></pre></td></tr></table></figure><h2 id="推送aliyun"><a href="#推送aliyun" class="headerlink" title="推送aliyun"></a>推送aliyun</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 状态</span><br>$ git status<br>hint: core.useBuiltinFSMonitor will be deprecated soon; use core.fsmonitor instead<br>hint: Disable this message with <span class="hljs-string">&quot;git config advice.useCoreFSMonitorConfig false&quot;</span><br>On branch main<br><br>No commits yet<br><br>Untracked files:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="hljs-keyword">in</span> what will be committed)<br>        .dockerignore<br>        .github/<br>        .gitignore<br>        .npmignore<br>        Dockerfile<br>        _config.landscape.yml<br>        _config.yml<br>        db.json<br>        id_rsa_2048<br>        package-lock.json<br>        package.json<br>        scaffolds/<br>        <span class="hljs-built_in">source</span>/<br>        themes/<br>        <br><span class="hljs-comment"># 生成标志</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;1111&#x27;</span> &gt;&gt; <span class="hljs-built_in">source</span>/_posts/hello-world.md<br><br><span class="hljs-comment"># 推送</span><br>git add . <br>git commit -m init<br><br>$ git push origin main<br>Enumerating objects: 122, <span class="hljs-keyword">done</span>.<br>Counting objects: 100% (122/122), <span class="hljs-keyword">done</span>.<br>Delta compression using up to 8 threads<br>Compressing objects: 100% (110/110), <span class="hljs-keyword">done</span>.<br>Writing objects: 100% (122/122), 580.00 KiB | 7.34 MiB/s, <span class="hljs-keyword">done</span>.<br>Total 122 (delta 0), reused 0 (delta 0), pack-reused 0<br>To https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git<br> * [new branch]      main -&gt; main<br><br></code></pre></td></tr></table></figure><h2 id="aliyun验证"><a href="#aliyun验证" class="headerlink" title="aliyun验证"></a>aliyun验证</h2><p><img src="20220512231059.png" alt="image-20220512231058218"></p><h2 id="添加流水线"><a href="#添加流水线" class="headerlink" title="添加流水线"></a>添加流水线</h2><p><img src="20220512231120.png" alt="image-20220512231118465"></p><p><img src="20220512231146.png" alt="image-20220512231145367"></p><p><img src="20220513000840.png" alt="image-20220513000838863"></p><p><img src="20220512231255.png" alt="image-20220512231253578"></p><p><img src="20220512231628.png" alt="image-20220512231626849"></p><p>删除kubernetes发布</p><p>保存并运行</p><p><img src="20220512231324.png" alt="image-20220512231322519"></p><h2 id="查看运行日志"><a href="#查看运行日志" class="headerlink" title="查看运行日志"></a>查看运行日志</h2><p><img src="20220512232021.png" alt="image-20220512232019242"></p><h2 id="查看github进度"><a href="#查看github进度" class="headerlink" title="查看github进度"></a>查看github进度</h2><p><img src="20220512232122.png" alt="image-20220512232121239"></p><h2 id="查看页面"><a href="#查看页面" class="headerlink" title="查看页面"></a>查看页面</h2><p>当进度为</p><p><img src="20220512232141.png" alt="image-20220512232140087"></p><p><img src="20220512232151.png" alt="image-20220512232150142"></p><h1 id="开发方式"><a href="#开发方式" class="headerlink" title="开发方式"></a>开发方式</h1><h2 id="准备vscode"><a href="#准备vscode" class="headerlink" title="准备vscode"></a>准备vscode</h2><p>在vscode中加载 codeup的仓库</p><p>安装插件 typora  <strong>安装后需要重启vscode</strong></p><p><img src="20220512231737.png" alt="image-20220512231735959"></p><h2 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># clone 代码</span><br><br><span class="hljs-comment"># 安装依赖</span><br>npm install<br><br><span class="hljs-comment"># 运行服务</span><br>npx hexo server<br></code></pre></td></tr></table></figure><blockquote><p><code>npx command</code> 相当于加载了<code>$(npm bin)</code> 目录到环境变量, 后面的命令可以执行</p></blockquote><p>通过本地调试出合理的界面, 推送aliyun, 就可以一键发布</p><h2 id="本地添加文章"><a href="#本地添加文章" class="headerlink" title="本地添加文章"></a>本地添加文章</h2><p>脚本 <code>addarticle.sh</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo -ne <span class="hljs-string">&quot;Enter a \033[1;31mtitle\033[0m for your blog: &quot;</span>; read title<br>[ $? -ne <span class="hljs-number">0</span> ] &amp;&amp; echo <span class="hljs-string">&#x27;exit&#x27;</span> &amp;&amp; sleep <span class="hljs-number">3</span> &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br>[ -z <span class="hljs-string">&quot;$title&quot;</span> ] &amp;&amp; echo title must be exists. &amp;&amp; sleep <span class="hljs-number">3</span> &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br>npx hexo new <span class="hljs-string">&quot;$title&quot;</span><br><br>start $(readlink -f .)<span class="hljs-regexp">/source/</span>_posts<br></code></pre></td></tr></table></figure><p>生成文章, 运行脚本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第1个文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-12 23:27:58</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="个性化页面展示"><a href="#个性化页面展示" class="headerlink" title="个性化页面展示"></a>个性化页面展示</h2><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><ul><li><code>hexo站点配置</code></li><li><code>fluid</code>主题配置</li><li><code>阅读量</code></li><li><code>评论功能</code></li></ul><p>例如修改标题 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;5-12 23:30&quot;</span><br><span class="hljs-comment"># ...</span><br><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 处理typora相对路径</span><br>npm install hexo-typora-asset --registry https://registry.npmjs.org --save<br></code></pre></td></tr></table></figure><p>typora中的配置</p><p><img src="image-20220513092438970.png" alt="image-20220513092438970"></p><p>重启 <code>npx hexo server</code></p><p><img src="20220512233119.png" alt="image-20220512233117729"></p><h2 id="文章默认页面-可选"><a href="#文章默认页面-可选" class="headerlink" title="文章默认页面(可选)"></a>文章默认页面(可选)</h2><p><a href="https://hexo.io/docs/writing#Scaffolds">https://hexo.io/docs/writing#Scaffolds</a></p><p>当我们写大量的文章,发现主页不应该显示所有内容,需要readmore, readmore之前有1小段简介</p><p>如下, 上面的nginx文章会<code>显示标题,简介,readmore</code>, 而下面的hello world就显示所有, 这两者区别在于</p><p>后者,默认</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第1个文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-12 23:27:58</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>前者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第1个文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-12 23:27:58</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hello</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># 背景</span><br><br><span class="hljs-string">这篇讲解如何编译安装nginx,</span> <span class="hljs-string">优化nginx</span><br><br><span class="hljs-string">&lt;!--more--&gt;</span><br></code></pre></td></tr></table></figure><p><img src="20220512234116.png" alt="image-20220512234114962"></p><p>要实现每个文章创建均生成nginx这样的模板, 编辑 <code>scaffolds/post.md</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> &#123;&#123; <span class="hljs-string">title</span> &#125;&#125;<br><span class="hljs-attr">date:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># 背景</span><br><br><span class="hljs-string">&lt;!--more--&gt;</span><br></code></pre></td></tr></table></figure><p>现在运行脚本 <code>addarticle.sh</code> 添加<strong>第2个文章</strong></p><p>网页已经达到效果</p><p><img src="20220512234553.png" alt="image-20220512234551537"></p><h2 id="准备一个主题-fluid"><a href="#准备一个主题-fluid" class="headerlink" title="准备一个主题 fluid"></a>准备一个主题 fluid</h2><blockquote><p>使用此主题后, 不需要前面的文章默认页面, 每个页面不需要加<code>&lt;!--more--&gt;</code> 主题会自动抽取前多少个字符,作为描述的.</p></blockquote><p>Fluid主题 <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git submodule add https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure><p>编辑 <code>_config.yml</code></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Extensions<br>## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: fluid<br></code></pre></td></tr></table></figure><p>重启 <code>npx hexo server</code></p><p><img src="20220512235039.png" alt="image-20220512235038001"></p><p>配置主题 <code>fluid</code> 需要准备一个文件 <code>_config.主题名.yml</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp themes<span class="hljs-regexp">/fluid/</span>_config.yml _config.fluid.yml<br></code></pre></td></tr></table></figure><p>测试配置是否生效,修改 <code>_config.fluid.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 首页副标题的独立设置</span><br><span class="hljs-comment"># Independent config of home page subtitle</span><br><span class="hljs-attr">slogan:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>  <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span><br>  <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;Hello 05-12 .... &quot;</span><br></code></pre></td></tr></table></figure><p>重启 <code>npx hexo server</code></p><p><img src="20220512235647.png" alt="image-20220512235645718"></p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>准备脚本 <code>push.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>git config --<span class="hljs-built_in">local</span> pull.rebase <span class="hljs-literal">true</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;笔记本-`date +%F_%T`&quot;</span><br><br><br>git push origin main<br><br>git pull origin main<br>[ $? -ne 0 ] &amp;&amp; <span class="hljs-built_in">exit</span> -1<br><br>git push origin main<br><br><span class="hljs-comment"># test</span><br>start $(<span class="hljs-built_in">readlink</span> -f .)/source/_posts<br></code></pre></td></tr></table></figure><p><a href="https://slcnx.github.io/">https://slcnx.github.io/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
